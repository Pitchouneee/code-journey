import { type MonacoLanguage } from './monacoLanguages';

export const monacoLanguageExtensions: Record<MonacoLanguage, string> = {
    'plaintext': 'txt',
    'abap': 'abap',
    'apex': 'cls',
    'azcli': 'azcli',
    'bat': 'bat',
    'bicep': 'bicep',
    'cameligo': 'mligo',
    'clojure': 'clj',
    'coffeescript': 'coffee',
    'c': 'c',
    'cpp': 'cpp',
    'csharp': 'cs',
    'csp': 'csp',
    'css': 'css',
    'cypher': 'cypher',
    'dart': 'dart',
    'dockerfile': 'dockerfile',
    'ecl': 'ecl',
    'elixir': 'ex',
    'flow9': 'flow',
    'fsharp': 'fs',
    'freemarker2': 'ftl',
    'freemarker2.tag-angle.interpolation-dollar': 'ftl',
    'freemarker2.tag-bracket.interpolation-dollar': 'ftl',
    'freemarker2.tag-angle.interpolation-bracket': 'ftl',
    'freemarker2.tag-bracket.interpolation-bracket': 'ftl',
    'freemarker2.tag-auto.interpolation-dollar': 'ftl',
    'freemarker2.tag-auto.interpolation-bracket': 'ftl',
    'go': 'go',
    'graphql': 'graphql',
    'handlebars': 'hbs',
    'hcl': 'hcl',
    'html': 'html',
    'ini': 'ini',
    'java': 'java',
    'javascript': 'js',
    'julia': 'jl',
    'kotlin': 'kt',
    'less': 'less',
    'lexon': 'lex',
    'lua': 'lua',
    'liquid': 'liquid',
    'm3': 'm3',
    'markdown': 'md',
    'mdx': 'mdx',
    'mips': 'mips',
    'msdax': 'dax',
    'mysql': 'sql',
    'objective-c': 'm',
    'pascal': 'pas',
    'pascaligo': 'ligo',
    'perl': 'pl',
    'pgsql': 'sql',
    'php': 'php',
    'pla': 'pla',
    'postiats': 'dats',
    'powerquery': 'pq',
    'powershell': 'ps1',
    'proto': 'proto',
    'pug': 'pug',
    'python': 'py',
    'qsharp': 'qs',
    'r': 'r',
    'razor': 'cshtml',
    'redis': 'redis',
    'redshift': 'sql',
    'restructuredtext': 'rst',
    'ruby': 'rb',
    'rust': 'rs',
    'sb': 'sb',
    'scala': 'scala',
    'scheme': 'scm',
    'scss': 'scss',
    'shell': 'sh',
    'sol': 'sol',
    'aes': 'aes',
    'sparql': 'sparql',
    'sql': 'sql',
    'st': 'st',
    'swift': 'swift',
    'systemverilog': 'sv',
    'verilog': 'v',
    'tcl': 'tcl',
    'twig': 'twig',
    'typescript': 'ts',
    'typespec': 'tsp',
    'vb': 'vb',
    'wgsl': 'wgsl',
    'xml': 'xml',
    'yaml': 'yml',
    'json': 'json'
};

export const getLanguageExtension = (language: MonacoLanguage): string => {
    return monacoLanguageExtensions[language] || 'txt';
};